{"ast":null,"code":"import _toConsumableArray from\"/home/bordkanone/vzxk/vzxk_project/vzxk_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React,{useMemo}from\"react\";export var useSortedPosts=function useSortedPosts(posts,sort){var sortedPost=useMemo(function(){if(sort){return _toConsumableArray(posts).sort(function(a,b){return a[sort].localeCompare(b[sort]);});}return posts;},[sort,posts]);return sortedPost;};export var usePosts=function usePosts(posts,sort,query){var sortedPost=useSortedPosts(posts,sort);var getSortedandFilteredList=useMemo(function(){return sortedPost.filter(function(post){return post.title.toLowerCase().includes(query);});},[query,sortedPost]);return getSortedandFilteredList;};","map":{"version":3,"sources":["/home/bordkanone/vzxk/vzxk_project/vzxk_ui/src/components/hooks/usePosts.jsx"],"names":["React","useMemo","useSortedPosts","posts","sort","sortedPost","a","b","localeCompare","usePosts","query","getSortedandFilteredList","filter","post","title","toLowerCase","includes"],"mappings":"yKAAA,MAAOA,CAAAA,KAAP,EAAeC,OAAf,KAA6B,OAA7B,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAQC,IAAR,CAAiB,CAC3C,GAAMC,CAAAA,UAAU,CAAGJ,OAAO,CAAC,UAAI,CAC3B,GAAIG,IAAJ,CAAU,CACN,MAAO,oBAAID,KAAJ,EAAWC,IAAX,CAAgB,SAACE,CAAD,CAAGC,CAAH,QAAQD,CAAAA,CAAC,CAACF,IAAD,CAAD,CAAQI,aAAR,CAAsBD,CAAC,CAACH,IAAD,CAAvB,CAAR,EAAhB,CAAP,CACH,CACD,MAAOD,CAAAA,KAAP,CACH,CALyB,CAKvB,CAACC,IAAD,CAAOD,KAAP,CALuB,CAA1B,CAMA,MAAOE,CAAAA,UAAP,CACH,CARM,CAUP,MAAO,IAAMI,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACN,KAAD,CAAQC,IAAR,CAAcM,KAAd,CAAwB,CAC5C,GAAML,CAAAA,UAAU,CAAGH,cAAc,CAACC,KAAD,CAAQC,IAAR,CAAjC,CACA,GAAMO,CAAAA,wBAAwB,CAAGV,OAAO,CAAC,UAAI,CACzC,MAAOI,CAAAA,UAAU,CAACO,MAAX,CAAkB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,KAAL,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCN,KAAlC,CAAJ,EAAtB,CAAP,CACH,CAFuC,CAErC,CAACA,KAAD,CAAQL,UAAR,CAFqC,CAAxC,CAGA,MAAOM,CAAAA,wBAAP,CACH,CANM","sourcesContent":["import React, {useMemo} from \"react\";\n\nexport const useSortedPosts = (posts, sort) => {\n    const sortedPost = useMemo(()=>{\n        if (sort) {\n            return [...posts].sort((a,b)=> a[sort].localeCompare(b[sort]))\n        }\n        return posts\n    }, [sort, posts])\n    return sortedPost\n}  \n\nexport const usePosts = (posts, sort, query) => {\n    const sortedPost = useSortedPosts(posts, sort)\n    const getSortedandFilteredList = useMemo(()=>{\n        return sortedPost.filter(post => post.title.toLowerCase().includes(query))\n    }, [query, sortedPost])\n    return getSortedandFilteredList\n}"]},"metadata":{},"sourceType":"module"}