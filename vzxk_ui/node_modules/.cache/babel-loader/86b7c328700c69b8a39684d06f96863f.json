{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useMemo } from \"react\";\nexport const useSortedPosts = (posts, sort) => {\n  _s();\n\n  const sortedPost = useMemo(() => {\n    if (sort) {\n      return [...posts].sort((a, b) => a[sort].localeCompare(b[sort]));\n    }\n\n    return posts;\n  }, [sort, posts]);\n  return sortedPost;\n};\n\n_s(useSortedPosts, \"kztGnBk7QlBaMxMv9rZfT5ZIynQ=\");\n\nexport const usePosts = (posts, sort, query) => {\n  _s2();\n\n  const sortedPost = useSortedPosts(posts, sort);\n  const getSortedandFilteredList = useMemo(() => {\n    return sortedPost.filter(post => post.title.toLowerCase().includes(query));\n  }, [query, sortedPostList]);\n  return getSortedandFilteredList;\n};\n\n_s2(usePosts, \"/Niz++votpPraYzjMnRajlTCE4k=\", false, function () {\n  return [useSortedPosts];\n});","map":{"version":3,"sources":["/home/bordkanone/vzxk/vzxk_project/vzxk_ui/src/components/hooks/usePosts.jsx"],"names":["React","useMemo","useSortedPosts","posts","sort","sortedPost","a","b","localeCompare","usePosts","query","getSortedandFilteredList","filter","post","title","toLowerCase","includes","sortedPostList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,OAAf,QAA6B,OAA7B;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAAA;;AAC3C,QAAMC,UAAU,GAAGJ,OAAO,CAAC,MAAI;AAC3B,QAAIG,IAAJ,EAAU;AACN,aAAO,CAAC,GAAGD,KAAJ,EAAWC,IAAX,CAAgB,CAACE,CAAD,EAAGC,CAAH,KAAQD,CAAC,CAACF,IAAD,CAAD,CAAQI,aAAR,CAAsBD,CAAC,CAACH,IAAD,CAAvB,CAAxB,CAAP;AACH;;AACD,WAAOD,KAAP;AACH,GALyB,EAKvB,CAACC,IAAD,EAAOD,KAAP,CALuB,CAA1B;AAMA,SAAOE,UAAP;AACH,CARM;;GAAMH,c;;AAUb,OAAO,MAAMO,QAAQ,GAAG,CAACN,KAAD,EAAQC,IAAR,EAAcM,KAAd,KAAwB;AAAA;;AAC5C,QAAML,UAAU,GAAGH,cAAc,CAACC,KAAD,EAAQC,IAAR,CAAjC;AACA,QAAMO,wBAAwB,GAAGV,OAAO,CAAC,MAAI;AACzC,WAAOI,UAAU,CAACO,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACC,KAAL,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCN,KAAlC,CAA1B,CAAP;AACH,GAFuC,EAErC,CAACA,KAAD,EAAQO,cAAR,CAFqC,CAAxC;AAGA,SAAON,wBAAP;AACH,CANM;;IAAMF,Q;UACUP,c","sourcesContent":["import React, {useMemo} from \"react\";\n\nexport const useSortedPosts = (posts, sort) => {\n    const sortedPost = useMemo(()=>{\n        if (sort) {\n            return [...posts].sort((a,b)=> a[sort].localeCompare(b[sort]))\n        }\n        return posts\n    }, [sort, posts])\n    return sortedPost\n}  \n\nexport const usePosts = (posts, sort, query) => {\n    const sortedPost = useSortedPosts(posts, sort)\n    const getSortedandFilteredList = useMemo(()=>{\n        return sortedPost.filter(post => post.title.toLowerCase().includes(query))\n    }, [query, sortedPostList])\n    return getSortedandFilteredList\n}"]},"metadata":{},"sourceType":"module"}